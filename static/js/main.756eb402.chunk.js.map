{"version":3,"sources":["services/Co2EmissionService.tsx","components/buttons/Button.tsx","components/buttons/FacebookLoginButton.tsx","components/buttons/IconButton.tsx","components/header/Header.tsx","utils/FormatUtils.tsx","components/header/ParticipantDropdown.tsx","environment/index.tsx","services/connector.tsx","services/ParticipantService.tsx","components/modals/LeaderboardModal.tsx","services/MunicipalityService.tsx","services/PurchaseService.tsx","components/header/ParticipantHeaderStatus.tsx","components/layout/Col.tsx","components/layout/Row.tsx","components/modals/Modal.tsx","components/Loading.tsx","components/Spinner.tsx","components/CurvedProgressBar.tsx","components/LineProgressBar.tsx","components/ProgressBar.js","components/TreeCounter.tsx","components/Table.tsx","pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["totalCo2","Button","children","className","loading","disabled","link","rest","classes","push","join","tag","Link","undefined","to","size","FacebookLoginButton","onClick","text","icon","FaFacebook","IconButton","Icon","Header","Container","Navbar","ParticipantHeaderStatus","FormatUtils","name","split","num","toString","replace","ParticipantDropdown","participant","logout","UncontrolledDropdown","nav","inNavbar","DropdownToggle","getFirstName","thousandSeparator","trees","DropdownMenu","right","DropdownItem","divider","envParams","api","connector","axios","create","baseURL","EnvParams","headers","Accept","ParticipantService","body","post","data","get","Co2EmissionService","treeCount","this","co2TonnesPerTree","tonnesCo2","treesPerTonCo2","getCo2EmissionTypes","response","reduce","a","b","co2","municipalityData","participantData","MunicipalityService","PurchaseService","UserHeaderStatus","useState","setLoading","setParticipant","facebookLogout","FB","facebookLogin","login","getFacebookInfo","scope","fields","console","log","error","getParticipant","currentParticipant","useEffect","checkFacebookStatus","getLoginStatus","status","setTimeout","UserState","Modal","header","footer","ModalHeader","ModalBody","ModalFooter","LeaderboardModal","isParticipants","setIsParticipants","rows","tableData","setTabledata","switchType","getMunicipalities","getParticipants","sort","code","label","hover","Loading","style","marginTop","Spinner","CurvedProgressBar","fillColor","getComputedStyle","document","documentElement","getPropertyValue","trailColor","ProgressBar","SemiCircle","options","strokeWidth","color","duration","initialAnimate","LineProgressBar","Line","Shape","progressBar","React","createRef","props","oldProps","shape","container","current","ShapeClass","setProgress","progress","animateProgress","setText","destroy","animate","set","prevProps","isEqual","containerClassName","ref","Component","defaultProps","containerStyle","Circle","TreeCounter","totalTreesPlanted","readableString","Table","map","key","row","index","Home","openModal","setOpenModal","plantedTrees","setPlantedTrees","setMunicipalities","getProgress","getTreesPlanted","getTotalCo2","co2Total","co2Countered","getCo2TonnesForTreeCount","alt","src","isOpen","toggle","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.756eb402.chunk.js","sourcesContent":["import connector from './connector'\r\n\r\nlet totalCo2: number\r\nclass Co2EmissionService {\r\n  static co2TonnesPerTree: number = 0.1;\r\n  static treesPerTonCo2: number = 10;\r\n\r\n  static getCo2TonnesForTreeCount (treeCount: number) {\r\n    return this.co2TonnesPerTree * treeCount\r\n  }\r\n\r\n  static getTreeCountForCo2Tonnes (tonnesCo2: number) {\r\n    return this.treesPerTonCo2 * tonnesCo2\r\n  }\r\n\r\n  static async getCo2EmissionTypes () {\r\n    const { data } = await connector.get('/co2emissiontypes/')\r\n    return data\r\n  }\r\n\r\n  static async getTotalCo2 () {\r\n    if (totalCo2) {\r\n      return totalCo2\r\n    }\r\n    const response = await this.getCo2EmissionTypes()\r\n    totalCo2 = response.reduce((a: number, b: any) => a + b.co2, 0)\r\n    return totalCo2\r\n  }\r\n}\r\n\r\nexport default Co2EmissionService\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button as BootstrapButton } from 'reactstrap'\r\n\r\nimport { Spinner } from 'components'\r\n\r\ntype ButtonProps = {\r\n  children: any,\r\n  className?: string,\r\n  loading?: boolean,\r\n  disabled?: boolean,\r\n  link?: string,\r\n  [rest:string]: any\r\n}\r\n\r\nconst Button = ({ children, className, loading, disabled, link, ...rest }: ButtonProps) => {\r\n  const classes = ['button-component']\r\n  if (className) {\r\n    classes.push(className)\r\n  }\r\n\r\n  return (\r\n    <BootstrapButton\r\n      className={classes.join(' ')}\r\n      disabled={disabled || loading}\r\n      tag={link ? Link : undefined}\r\n      to={link || undefined}\r\n      {...rest}\r\n    >\r\n      {loading && (\r\n        <Spinner size={1} />\r\n      )}\r\n      {children}\r\n    </BootstrapButton>\r\n  )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport { FaFacebook } from 'react-icons/fa'\r\n\r\nimport { IconButton } from 'components'\r\n\r\nimport './FacebookLoginButton.scss'\r\n\r\ntype FacebookLoginButtonProps = {\r\n  onClick(): void\r\n}\r\n\r\nconst FacebookLoginButton = ({ onClick }: FacebookLoginButtonProps) => (\r\n  <IconButton\r\n    className='facebook-login-button-component'\r\n    onClick={onClick}\r\n    text='Innskrá með Facebook'\r\n    icon={FaFacebook}\r\n  />\r\n)\r\n\r\nexport default FacebookLoginButton\r\n","import React from 'react'\r\n\r\nimport { Button } from 'components'\r\n\r\ntype IconButtonProps = {\r\n  icon: any,\r\n  text: string,\r\n  [rest:string]: any\r\n}\r\n\r\nconst IconButton = ({ icon, text, ...rest }: IconButtonProps) => {\r\n  const Icon = icon\r\n  return (\r\n    <Button {...rest}>\r\n      <Icon className={`${text ? 'mr-1' : ''}`} /> {text}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default IconButton\r\n","import React from 'react'\r\nimport { Navbar, Container } from 'reactstrap'\r\n\r\nimport { ParticipantHeaderStatus } from 'components'\r\n\r\nimport './Header.scss'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Container className='header-component'>\r\n      <Navbar>\r\n        <div />\r\n        <ParticipantHeaderStatus />\r\n      </Navbar>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","class FormatUtils {\r\n  static getFirstName (name: string) {\r\n    return name.split(' ')[0]\r\n  }\r\n\r\n  static thousandSeparator (num: number) {\r\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.')\r\n  }\r\n}\r\n\r\nexport default FormatUtils\r\n","import React from 'react'\r\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\r\n\r\nimport { Button } from 'components'\r\nimport { FormatUtils } from 'utils'\r\nimport { Participant } from 'types'\r\n\r\ntype ParticipantDropdownProps = {\r\n  participant?: Participant,\r\n  logout(): void\r\n}\r\n\r\nconst ParticipantDropdown = ({ participant, logout }: ParticipantDropdownProps) => (\r\n  <>\r\n    <UncontrolledDropdown nav inNavbar>\r\n      <DropdownToggle nav>\r\n        <Button>{`${FormatUtils.getFirstName((participant?.name || ''))} - ${FormatUtils.thousandSeparator(participant?.trees || 0)} ${((participant && participant?.trees % 10 === 1) && (participant && participant?.trees !== 11)) ? 'tré' : 'trjám'} plantað`}</Button>\r\n      </DropdownToggle>\r\n      <DropdownMenu right>\r\n        <DropdownItem>\r\n          Skógurinn minn\r\n        </DropdownItem>\r\n        <DropdownItem divider />\r\n        <DropdownItem onClick={logout}>\r\n          Útskrá\r\n        </DropdownItem>\r\n      </DropdownMenu>\r\n    </UncontrolledDropdown>\r\n  </>\r\n)\r\n\r\nexport default ParticipantDropdown\r\n","type EnvParams = {\r\n  api: string\r\n}\r\n\r\nconst production: EnvParams = {\r\n  api: 'https://api.jofnumokkur.xyz/v1'\r\n}\r\n\r\nconst local: EnvParams = {\r\n  api: 'http://127.0.0.1:8000/v1'\r\n}\r\n\r\nconst env = process.env.REACT_APP_ENV\r\n\r\nconst envParams: EnvParams = (\r\n  env === 'production'\r\n    ? production\r\n    : local\r\n)\r\n\r\nexport default envParams\r\n","import axios from 'axios'\r\n\r\nimport EnvParams from 'environment'\r\n\r\nconst connector = axios.create({\r\n  baseURL: `${EnvParams.api}`,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-type': 'application/json'\r\n  }\r\n})\r\n\r\nexport default connector\r\n","import connector from './connector'\r\n\r\nclass ParticipantService {\r\n  static async getParticipant (body: {\r\n    email: string,\r\n    name: string\r\n  }) {\r\n    const { data } = await connector.post('/participant/', body)\r\n    return data\r\n  }\r\n\r\n  static async getParticipants () {\r\n    const { data } = await connector.get('/participants/')\r\n    return data\r\n  }\r\n}\r\n\r\nexport default ParticipantService\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { Button, Modal, Table } from 'components'\r\nimport { TableHeader, TableRow } from 'types'\r\nimport { MunicipalityService, ParticipantService } from 'services'\r\n\r\nimport './LeaderboardModal.scss'\r\n\r\ntype TableData = {\r\n  headers: TableHeader[],\r\n  rows: TableRow[]\r\n}\r\n\r\ntype LeaderboardModalProps = {\r\n  [rest:string]: any\r\n}\r\n\r\nlet municipalityData: any\r\nlet participantData: any\r\n\r\nconst LeaderboardModal = ({ ...rest }: LeaderboardModalProps) => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [isParticipants, setIsParticipants] = useState(true)\r\n  const [tableData, setTabledata]: [TableData, any] = useState({\r\n    headers: [],\r\n    rows: []\r\n  })\r\n\r\n  useEffect(() => {\r\n    switchType()\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  const switchType = () => {\r\n    if (isParticipants) {\r\n      getMunicipalities()\r\n    } else {\r\n      getParticipants()\r\n    }\r\n    setIsParticipants(!isParticipants)\r\n  }\r\n\r\n  const getMunicipalities = async () => {\r\n    if (!municipalityData) {\r\n      setLoading(true)\r\n      try {\r\n        const response = await MunicipalityService.getMunicipalities()\r\n        municipalityData = response.sort((a: TableRow, b: TableRow) => a.trees - b.trees)\r\n      } catch (e) {\r\n        console.log(e)\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n    setTabledata({\r\n      headers: [\r\n        {\r\n          code: 'name',\r\n          label: 'Sveitarfélag'\r\n        },\r\n        {\r\n          code: 'population',\r\n          label: 'Íbúafjöldi'\r\n        },\r\n        {\r\n          code: 'trees',\r\n          label: 'Tré'\r\n        }\r\n      ],\r\n      rows: municipalityData\r\n    })\r\n  }\r\n\r\n  const getParticipants = async () => {\r\n    if (!participantData) {\r\n      setLoading(true)\r\n      try {\r\n        const response = await ParticipantService.getParticipants()\r\n        participantData = response.sort((a: TableRow, b: TableRow) => a.trees - b.trees)\r\n      } catch (e) {\r\n        console.log(e)\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n    setTabledata({\r\n      headers: [\r\n        {\r\n          code: 'name',\r\n          label: 'Þátttakandi'\r\n        },\r\n        {\r\n          code: 'trees',\r\n          label: 'Tré'\r\n        }\r\n      ],\r\n      rows: participantData\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      className='leaderboard-modal-component'\r\n      size='xl'\r\n      {...rest}\r\n    >\r\n      <Button onClick={() => switchType()}>\r\n        {isParticipants ? 'Sjá sveitarfélög' : 'Sjá þátttakendur'}\r\n      </Button>\r\n      <Table\r\n        headers={tableData.headers}\r\n        rows={tableData.rows}\r\n        loading={loading}\r\n        hover\r\n      />\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default LeaderboardModal\r\n","import connector from './connector'\r\n\r\nclass MunicipalityService {\r\n  static async getMunicipalities () {\r\n    const { data } = await connector.get('/municipalities/')\r\n    return data\r\n  }\r\n}\r\n\r\nexport default MunicipalityService\r\n","import connector from './connector'\r\n\r\nclass PurchaseService {\r\n  static async getTreesPlanted () {\r\n    const { data } = await connector.get('/planted/')\r\n    return data\r\n  }\r\n}\r\n\r\nexport default PurchaseService\r\n","/* global FB */\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport { FacebookLoginButton, ParticipantDropdown } from 'components'\r\nimport { ParticipantService } from 'services'\r\nimport { Participant } from 'types'\r\n\r\nconst UserHeaderStatus = () => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [participant, setParticipant]: [Participant, any] = useState(null)\r\n\r\n  const checkFacebookStatus = () => {\r\n    setLoading(true)\r\n    if (typeof FB !== 'undefined') {\r\n      FB.getLoginStatus((response: any) => {\r\n        console.log('FB get login status response', response)\r\n        if (response.status === 'connected') {\r\n          getFacebookInfo()\r\n        } else {\r\n          setLoading(false)\r\n        }\r\n      })\r\n    } else {\r\n      setTimeout(() => {\r\n        checkFacebookStatus()\r\n      }, 300)\r\n    }\r\n  }\r\n\r\n  const facebookLogout = () => {\r\n    FB.logout(() => {\r\n      setParticipant(null)\r\n    })\r\n  }\r\n\r\n  const facebookLogin = () => {\r\n    FB.login(() => {\r\n      getFacebookInfo()\r\n    }, { scope: 'public_profile,email' })\r\n  }\r\n\r\n  const getFacebookInfo = () => {\r\n    FB.api('/me', { fields: 'name, email' }, async (response: any) => {\r\n      console.log('FB /me response', response)\r\n      try {\r\n        if (!response.error) {\r\n          const currentParticipant = await ParticipantService.getParticipant(response)\r\n          setParticipant(currentParticipant)\r\n        }\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkFacebookStatus()\r\n  // eslint-disable-next-line\r\n  }, [])\r\n\r\n  const UserState = () => {\r\n    if (loading) {\r\n      return null\r\n    } else if (!participant) {\r\n      return <FacebookLoginButton onClick={facebookLogin} />\r\n    }\r\n    return <ParticipantDropdown\r\n      participant={participant}\r\n      logout={facebookLogout}\r\n    />\r\n  }\r\n\r\n  return <UserState />\r\n}\r\n\r\nexport default UserHeaderStatus\r\n","import { Col } from 'reactstrap'\r\n\r\nexport default Col\r\n","import { Row } from 'reactstrap'\r\n\r\nexport default Row\r\n","import React from 'react'\r\nimport { Modal as BootstrapModal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\ntype ModalProps = {\r\n  children?: any,\r\n  header?: string,\r\n  footer?: any,\r\n  [rest:string]: any\r\n}\r\n\r\nconst Modal = ({ header, footer, children, ...rest }: ModalProps) => (\r\n  <BootstrapModal {...rest}>\r\n    {header && (<ModalHeader>{header}</ModalHeader>)}\r\n    {children && (<ModalBody>{children}</ModalBody>)}\r\n    {footer && (<ModalFooter>{footer}</ModalFooter>)}\r\n  </BootstrapModal>\r\n)\r\n\r\nexport default Modal\r\n","import React from 'react'\r\n\r\nimport { Spinner } from 'components'\r\n\r\nimport './Loading.scss'\r\n\r\ntype LoadingProps = {\r\n  size?: number\r\n}\r\n\r\nconst Loading = ({ size = 2 }: LoadingProps) => {\r\n  return (\r\n    <div className='loading-component' style={{ marginTop: `${size / 2}em` }}>\r\n      <Spinner size={size} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading\r\n","import React from 'react'\r\nimport { FaSpinner } from 'react-icons/fa'\r\n\r\nimport './Spinner.scss'\r\n\r\ntype SpinnerProps = {\r\n  size?: number\r\n}\r\n\r\nconst Spinner = ({ size = 2 }: SpinnerProps) => {\r\n  return (\r\n    <div className='spinner-component'>\r\n      <FaSpinner className='icon-spin' size={`${size}em`} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Spinner\r\n","import React from 'react'\r\nimport { ProgressBar } from 'components'\r\n\r\ntype ProgressBarProps = {\r\n  [rest:string]: any\r\n}\r\n\r\nconst CurvedProgressBar = ({ ...rest }: ProgressBarProps) => {\r\n  const fillColor = getComputedStyle(document.documentElement)\r\n    .getPropertyValue('--progress-bar-fill')\r\n\r\n  const trailColor = getComputedStyle(document.documentElement)\r\n    .getPropertyValue('--progress-bar-trail')\r\n  console.log(trailColor, fillColor)\r\n  return (\r\n    <ProgressBar.SemiCircle\r\n      options={{\r\n        strokeWidth: 4,\r\n        color: fillColor,\r\n        trailColor: trailColor,\r\n        duration: 1500\r\n      }}\r\n      initialAnimate={true}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport default CurvedProgressBar\r\n","import React from 'react'\r\nimport { ProgressBar } from 'components'\r\n\r\ntype ProgressBarProps = {\r\n  [rest:string]: any\r\n}\r\n\r\nconst LineProgressBar = ({ ...rest }: ProgressBarProps) => {\r\n  const fillColor = getComputedStyle(document.documentElement)\r\n    .getPropertyValue('--progress-bar-fill')\r\n\r\n  const trailColor = getComputedStyle(document.documentElement)\r\n    .getPropertyValue('--progress-bar-trail')\r\n\r\n  return (\r\n    <ProgressBar.Line\r\n      options={{\r\n        strokeWidth: 4,\r\n        color: fillColor,\r\n        trailColor: trailColor,\r\n        duration: 1500\r\n      }}\r\n      initialAnimate={true}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport default LineProgressBar\r\n","import React, { Component } from 'react'\r\nimport isEqual from 'lodash/isEqual'\r\nimport ProgressBar from 'progressbar.js'\r\n\r\nclass Shape extends Component {\r\n  static defaultProps = {\r\n    ShapeClass: null,\r\n    options: {},\r\n    progress: 0,\r\n    text: null,\r\n    initialAnimate: false,\r\n    containerStyle: {},\r\n    containerClassName: 'progressbar-container'\r\n  };\r\n\r\n  shape;\r\n\r\n  progressBar = React.createRef();\r\n\r\n  create (props, oldProps) {\r\n    if (this.shape) {\r\n      return\r\n    }\r\n\r\n    // setState function is not used to prevent a new render cycle\r\n    // This handling happens outside of React component's lifecycle\r\n    const container = this.progressBar.current\r\n    this.shape = new props.ShapeClass(container, props.options)\r\n    if (props.initialAnimate) {\r\n      if (oldProps) {\r\n        this.setProgress(oldProps.progress)\r\n      }\r\n\r\n      this.animateProgress(props.progress)\r\n    } else {\r\n      this.setProgress(props.progress)\r\n    }\r\n\r\n    this.setText(props.text)\r\n  }\r\n\r\n  destroy () {\r\n    if (this.shape) {\r\n      this.shape.destroy()\r\n      this.shape = null\r\n    }\r\n  }\r\n\r\n  animateProgress (progress) {\r\n    this.shape.animate(progress)\r\n  }\r\n\r\n  setProgress (progress) {\r\n    this.shape.set(progress)\r\n  }\r\n\r\n  setText (text) {\r\n    if (text) {\r\n      this.shape.setText(text)\r\n    }\r\n  }\r\n\r\n  componentDidUpdate (prevProps) {\r\n    if (!isEqual(this.props.options, prevProps.options)) {\r\n      this.destroy()\r\n      this.create(this.props, prevProps)\r\n    }\r\n    this.animateProgress(this.props.progress)\r\n    this.setText(this.props.text)\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.create(this.props, null)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    this.destroy()\r\n  }\r\n\r\n  render () {\r\n    const { style, containerClassName } = this.props\r\n    return <div className={containerClassName} style={style} ref={this.progressBar} />\r\n  }\r\n}\r\n\r\nclass Line extends Component {\r\n  render () {\r\n    return <Shape {...this.props} ShapeClass={ProgressBar.Line} />\r\n  }\r\n}\r\n\r\nclass Circle extends Component {\r\n  render () {\r\n    return <Shape {...this.props} ShapeClass={ProgressBar.Circle} />\r\n  }\r\n}\r\n\r\nclass SemiCircle extends Component {\r\n  render () {\r\n    return <Shape {...this.props} ShapeClass={ProgressBar.SemiCircle} />\r\n  }\r\n}\r\n\r\nexport default {\r\n  Line,\r\n  Circle,\r\n  SemiCircle\r\n}\r\n","import React from 'react'\r\n\r\nimport { FormatUtils } from 'utils'\r\n\r\ntype TreeCounterProps = {\r\n  totalTreesPlanted: number,\r\n  [rest: string]: any\r\n}\r\n\r\nconst TreeCounter = ({ totalTreesPlanted, ...rest }: TreeCounterProps) => {\r\n  var readableString = FormatUtils.thousandSeparator(totalTreesPlanted)\r\n\r\n  return (\r\n    <div {...rest}>\r\n      <p>{readableString}</p>\r\n      <p> tré gróðursett</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TreeCounter\r\n","import React from 'react'\r\nimport { Table as BootstrapTable } from 'reactstrap'\r\n\r\nimport { Loading } from 'components'\r\n\r\nimport { TableHeader, TableRow } from 'types'\r\n\r\ntype TableProps = {\r\n  headers: TableHeader[],\r\n  rows: TableRow[],\r\n  loading: boolean,\r\n  [rest: string]: any;\r\n}\r\n\r\nconst Table = ({ headers, rows, loading, ...rest }: TableProps) => (\r\n  <BootstrapTable {...rest}>\r\n    {loading ? <Loading /> : (\r\n      <>\r\n        <thead>\r\n          <tr>\r\n            <th />\r\n            {headers.map((header) => (\r\n              <th key={header.code}>{header.label}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {rows.map((row, index) => (\r\n            <tr key={index}>\r\n              <td>{index + 1}.</td>\r\n              {headers.map((header) => (\r\n                <td key={header.code}>\r\n                  {row[header.code]}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </>\r\n    )}\r\n  </BootstrapTable>\r\n)\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from 'react'\r\nimport { CurvedProgressBar, LineProgressBar, TreeCounter, LeaderboardModal } from 'components'\r\nimport { Co2EmissionService, PurchaseService, MunicipalityService } from 'services'\r\nimport { Municipality } from 'types'\r\n\r\nimport './Home.scss'\r\n\r\nconst Home = () => {\r\n  const [openModal, setOpenModal] = useState('')\r\n  const [plantedTrees, setPlantedTrees] = useState(0)\r\n  const [progress, setProgress] = useState(0)\r\n  const [municipalities, setMunicipalities]: [Municipality[], any] = useState([])\r\n\r\n  useEffect(() => {\r\n    getProgress()\r\n    getMunicipalities()\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  const getProgress = async () => {\r\n    const trees = await PurchaseService.getTreesPlanted()\r\n    const co2Total = await Co2EmissionService.getTotalCo2()\r\n    const co2Countered = Co2EmissionService.getCo2TonnesForTreeCount(trees)\r\n    let status = co2Countered / co2Total\r\n    setPlantedTrees(trees)\r\n    if (status > 1) {\r\n      status = 1\r\n    }\r\n    setProgress(status)\r\n  }\r\n\r\n  const getMunicipalities = async () => {\r\n    try {\r\n      const response = await MunicipalityService.getMunicipalities()\r\n      response.sort((a: Municipality, b: Municipality) => a.trees - b.trees)\r\n      setMunicipalities(response)\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='home-page'>\r\n      <section className='intro_section'>\r\n        <div className='counter_and_logo_outer_container'>\r\n          <div className='counter_and_logo_container'>\r\n            <TreeCounter className='treecounter' totalTreesPlanted={plantedTrees} />\r\n            <img className='logo' alt='Our logo' src='/assets/logo-200x200.png' />\r\n          </div>\r\n          <CurvedProgressBar\r\n            progress={progress}\r\n          />\r\n        </div>\r\n        <div><LineProgressBar progress={1} /></div>\r\n      </section>\r\n      {/* <Button onClick={() => setOpenModal('leaderboard')}>\r\n        Sjá stigatöflu\r\n      </Button> */}\r\n      <LeaderboardModal\r\n        isOpen={openModal === 'leaderboard'}\r\n        toggle={() => setOpenModal('')}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n// Photo by Jon Flobrant on Unsplash\r\n","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Redirect,\r\n  Route,\r\n  Switch\r\n} from 'react-router-dom'\r\n\r\nimport { Header } from 'components'\r\n\r\nimport { Home } from 'pages'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './styles/index.scss'\r\n\r\nconst App = () => (\r\n  <>\r\n    <Router>\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path='/' component={Home} />\r\n        <Redirect to='/' />\r\n      </Switch>\r\n    </Router>\r\n  </>\r\n)\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}