{"version":3,"sources":["components/buttons/Button.tsx","components/buttons/FacebookLoginButton.tsx","components/header/Header.tsx","components/header/UserDropdown.tsx","components/header/UserHeaderStatus.tsx","components/Loading.tsx","components/layout/Col.tsx","components/layout/Row.tsx","components/Spinner.tsx","pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","children","className","loading","disabled","link","rest","classes","push","join","tag","Link","undefined","to","size","FacebookLoginButton","onClick","Header","Container","Navbar","NavbarBrand","alt","src","NavItem","UserDropdown","user","logout","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","name","DropdownMenu","right","DropdownItem","divider","UserHeaderStatus","useState","status","setStatus","setUser","facebookLogout","FB","response","console","log","facebookLogin","login","getFacebookInfo","scope","api","fields","error","useEffect","checkFacebookStatus","getLoginStatus","setTimeout","UserState","Loading","style","marginTop","Spinner","Home","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d50eae98.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button as BootstrapButton } from 'reactstrap'\r\n\r\nimport { Spinner } from 'components'\r\n\r\ntype ButtonProps = {\r\n  children: any,\r\n  className?: string,\r\n  loading?: boolean,\r\n  disabled?: boolean,\r\n  link?: string,\r\n  [rest:string]: any\r\n}\r\n\r\nconst Button = ({ children, className, loading, disabled, link, ...rest }: ButtonProps) => {\r\n  const classes = ['button-component']\r\n  if (className) {\r\n    classes.push(className)\r\n  }\r\n\r\n  return (\r\n    <BootstrapButton\r\n      className={classes.join(' ')}\r\n      disabled={disabled || loading}\r\n      tag={link ? Link : undefined}\r\n      to={link || undefined}\r\n      {...rest}\r\n    >\r\n      {loading && (\r\n        <Spinner size={1} />\r\n      )}\r\n      {children}\r\n    </BootstrapButton>\r\n  )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\n\r\nimport { Button } from 'components'\r\n\r\nimport './FacebookLoginButton.scss'\r\n\r\ntype FacebookLoginButtonProps = {\r\n  onClick(): void\r\n}\r\n\r\nconst FacebookLoginButton = ({ onClick }: FacebookLoginButtonProps) => (\r\n  <Button\r\n    className='facebook-login-component'\r\n    onClick={onClick}\r\n  >\r\n    Innskrá með Facebook\r\n  </Button>\r\n)\r\n\r\nexport default FacebookLoginButton\r\n","import React from 'react'\r\nimport { Navbar, NavbarBrand, Container, NavItem } from 'reactstrap'\r\n\r\nimport { UserHeaderStatus } from 'components'\r\n\r\nimport './Header.scss'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Container className='header-component'>\r\n      <Navbar>\r\n        <NavbarBrand>\r\n          <img alt='Our logo' src='/assets/logo-200x200.png' />\r\n        </NavbarBrand>\r\n        <NavItem>\r\n          <UserHeaderStatus />\r\n        </NavItem>\r\n      </Navbar>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem  } from 'reactstrap'\r\nimport { User } from 'types'\r\n\r\ntype UserDropdownProps = {\r\n  user?: User,\r\n  logout(): void\r\n}\r\n\r\nconst UserDropdown = ({ user, logout }: UserDropdownProps) => (\r\n  <UncontrolledDropdown nav inNavbar>\r\n    <DropdownToggle nav caret>\r\n      { user?.name }\r\n    </DropdownToggle>\r\n    <DropdownMenu right>\r\n      <DropdownItem>\r\n        Stillingar\r\n      </DropdownItem>\r\n      <DropdownItem divider />\r\n      <DropdownItem onClick={logout}>\r\n        Útskrá\r\n      </DropdownItem>\r\n    </DropdownMenu>\r\n  </UncontrolledDropdown>\r\n)\r\n\r\nexport default UserDropdown\r\n","/* global FB */\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport { Loading, FacebookLoginButton, UserDropdown } from 'components'\r\nimport { User } from 'types'\r\n\r\nconst UserHeaderStatus = () => {\r\n  const [status, setStatus] = useState('')\r\n  const [user, setUser]: [User, any] = useState(null)\r\n\r\n  const checkFacebookStatus = () => {\r\n    setStatus('loading')\r\n    if (typeof FB !== 'undefined') {\r\n      FB.getLoginStatus((response: any) => {\r\n        console.log(response)\r\n        if (response.status === 'connected') {\r\n          getFacebookInfo()\r\n        } else {\r\n          setStatus(response.status)\r\n        }\r\n      })\r\n    } else {\r\n      setTimeout(() => {\r\n        checkFacebookStatus()\r\n      }, 300)\r\n    }\r\n  }\r\n\r\n  const facebookLogout = () => {\r\n    FB.logout((response) => {\r\n      console.log(response)\r\n      setUser(null)\r\n      setStatus('')\r\n    })\r\n  }\r\n\r\n  const facebookLogin = () => {\r\n    FB.login((response) => {\r\n      getFacebookInfo()\r\n    }, { scope: 'public_profile,email' })\r\n  }\r\n\r\n  const getFacebookInfo = () => {\r\n    FB.api('/me', { fields: 'name, email' }, (response: any) => {\r\n      console.log(response)\r\n      if (!response.error) {\r\n        // todo: get from our own database the points for the given email.. or id maybe for security by obscurity\r\n        setUser(response)\r\n        setStatus('connected')\r\n      }\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkFacebookStatus()\r\n  // eslint-disable-next-line\r\n  }, [])\r\n\r\n  const UserState = () => {\r\n    if (status === 'loading') {\r\n      return <Loading />\r\n    } else if (!user) {\r\n      return <FacebookLoginButton onClick={facebookLogin} />\r\n    }\r\n    return <UserDropdown\r\n      user={user}\r\n      logout={facebookLogout}\r\n    />\r\n  }\r\n\r\n  return <UserState />\r\n}\r\n\r\nexport default UserHeaderStatus\r\n","import React from 'react'\r\n\r\nimport { Spinner } from 'components'\r\n\r\nimport './Loading.scss'\r\n\r\ntype LoadingProps = {\r\n  size?: number\r\n}\r\n\r\nconst Loading = ({ size = 2 }: LoadingProps) => {\r\n  return (\r\n    <div className='loading-component' style={{ marginTop: `${size / 2}em` }}>\r\n      <Spinner size={size} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading\r\n","import { Col } from 'reactstrap'\r\n\r\nexport default Col\r\n","import { Row } from 'reactstrap'\r\n\r\nexport default Row\r\n","import React from 'react'\r\nimport { FaSpinner } from 'react-icons/fa'\r\n\r\nimport './Spinner.scss'\r\n\r\ntype SpinnerProps = {\r\n  size?: number\r\n}\r\n\r\nconst Spinner = ({ size = 2 }: SpinnerProps) => {\r\n  return (\r\n    <div className='spinner-component'>\r\n      <FaSpinner className='icon-spin' size={`${size}em`} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Spinner\r\n","import React from 'react'\r\n\r\nimport './Home.scss'\r\n\r\nconst Home = () => (\r\n  <div className='home-page'>\r\n    <h1>Velkomin!</h1>\r\n  </div>\r\n)\r\n\r\nexport default Home\r\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch\n} from 'react-router-dom'\n\nimport { Header } from 'components'\n\nimport { Home } from 'pages'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './styles/index.scss'\n\nconst App = () => (\n  <>\n    <Header />\n    <div className='container route-container'>\n      <Router>\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Redirect to='/' />\n        </Switch>\n      </Router>\n    </div>\n  </>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}