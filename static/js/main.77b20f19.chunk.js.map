{"version":3,"sources":["components/buttons/Button.tsx","components/buttons/FacebookLoginButton.tsx","components/header/Header.tsx","components/header/UserDropdown.tsx","components/header/UserHeaderStatus.tsx","components/Loading.tsx","components/layout/Col.tsx","components/layout/Row.tsx","components/Spinner.tsx","environment/index.tsx","services/Co2EmissionService.tsx","services/connector.tsx","components/CurvedProgressBar.tsx","components/ProgressBar.js","components/TreeCounter.tsx","pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","children","className","loading","disabled","link","rest","classes","push","join","tag","Link","undefined","to","size","FacebookLoginButton","onClick","Header","Container","Navbar","NavbarBrand","NavItem","UserDropdown","user","logout","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","name","DropdownMenu","right","DropdownItem","divider","UserHeaderStatus","useState","status","setStatus","setUser","facebookLogout","FB","response","console","log","facebookLogin","login","getFacebookInfo","scope","api","fields","error","useEffect","checkFacebookStatus","getLoginStatus","setTimeout","UserState","Loading","style","marginTop","Spinner","envParams","Co2EmissionService","axios","create","baseURL","EnvParams","headers","Accept","treeCount","this","co2TonnesPerTree","tonnesCo2","treesPerTonCo2","label","value","CurvedProgressBar","emissionData","totalTreesPlanted","co2Total","reduce","a","b","progress","getCo2TonnesForTreeCount","fillColor","getComputedStyle","document","documentElement","getPropertyValue","trailColor","ProgressBar","SemiCircle","options","strokeWidth","color","duration","initialAnimate","Shape","progressBar","React","createRef","props","oldProps","shape","container","current","ShapeClass","setProgress","animateProgress","setText","text","destroy","animate","set","prevProps","isEqual","containerClassName","ref","Component","defaultProps","containerStyle","Line","Circle","TreeCounter","readableString","toLocaleString","Home","alt","src","getCo2EmissionData","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.77b20f19.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button as BootstrapButton } from 'reactstrap'\r\n\r\nimport { Spinner } from 'components'\r\n\r\ntype ButtonProps = {\r\n  children: any,\r\n  className?: string,\r\n  loading?: boolean,\r\n  disabled?: boolean,\r\n  link?: string,\r\n  [rest:string]: any\r\n}\r\n\r\nconst Button = ({ children, className, loading, disabled, link, ...rest }: ButtonProps) => {\r\n  const classes = ['button-component']\r\n  if (className) {\r\n    classes.push(className)\r\n  }\r\n\r\n  return (\r\n    <BootstrapButton\r\n      className={classes.join(' ')}\r\n      disabled={disabled || loading}\r\n      tag={link ? Link : undefined}\r\n      to={link || undefined}\r\n      {...rest}\r\n    >\r\n      {loading && (\r\n        <Spinner size={1} />\r\n      )}\r\n      {children}\r\n    </BootstrapButton>\r\n  )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\n\r\nimport { Button } from 'components'\r\n\r\nimport './FacebookLoginButton.scss'\r\n\r\ntype FacebookLoginButtonProps = {\r\n  onClick(): void\r\n}\r\n\r\nconst FacebookLoginButton = ({ onClick }: FacebookLoginButtonProps) => (\r\n  <Button\r\n    className='facebook-login-component'\r\n    onClick={onClick}\r\n  >\r\n    Innskrá með Facebook\r\n  </Button>\r\n)\r\n\r\nexport default FacebookLoginButton\r\n","import React from 'react'\r\nimport { Navbar, NavbarBrand, Container, NavItem } from 'reactstrap'\r\n\r\nimport { UserHeaderStatus } from 'components'\r\n\r\nimport './Header.scss'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Container className='header-component'>\r\n      <Navbar>\r\n        <NavbarBrand>\r\n       \r\n        </NavbarBrand>\r\n        <NavItem>\r\n          <UserHeaderStatus />\r\n        </NavItem>\r\n      </Navbar>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem  } from 'reactstrap'\r\nimport { User } from 'types'\r\n\r\ntype UserDropdownProps = {\r\n  user?: User,\r\n  logout(): void\r\n}\r\n\r\nconst UserDropdown = ({ user, logout }: UserDropdownProps) => (\r\n  <UncontrolledDropdown nav inNavbar>\r\n    <DropdownToggle nav caret>\r\n      { user?.name }\r\n    </DropdownToggle>\r\n    <DropdownMenu right>\r\n      <DropdownItem>\r\n        Stillingar\r\n      </DropdownItem>\r\n      <DropdownItem divider />\r\n      <DropdownItem onClick={logout}>\r\n        Útskrá\r\n      </DropdownItem>\r\n    </DropdownMenu>\r\n  </UncontrolledDropdown>\r\n)\r\n\r\nexport default UserDropdown\r\n","/* global FB */\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport { Loading, FacebookLoginButton, UserDropdown } from 'components'\r\nimport { User } from 'types'\r\n\r\nconst UserHeaderStatus = () => {\r\n  const [status, setStatus] = useState('')\r\n  const [user, setUser]: [User, any] = useState(null)\r\n\r\n  const checkFacebookStatus = () => {\r\n    setStatus('loading')\r\n    if (typeof FB !== 'undefined') {\r\n      FB.getLoginStatus((response: any) => {\r\n        console.log(response)\r\n        if (response.status === 'connected') {\r\n          getFacebookInfo()\r\n        } else {\r\n          setStatus(response.status)\r\n        }\r\n      })\r\n    } else {\r\n      setTimeout(() => {\r\n        checkFacebookStatus()\r\n      }, 300)\r\n    }\r\n  }\r\n\r\n  const facebookLogout = () => {\r\n    FB.logout((response) => {\r\n      console.log(response)\r\n      setUser(null)\r\n      setStatus('')\r\n    })\r\n  }\r\n\r\n  const facebookLogin = () => {\r\n    FB.login((response) => {\r\n      getFacebookInfo()\r\n    }, { scope: 'public_profile,email' })\r\n  }\r\n\r\n  const getFacebookInfo = () => {\r\n    FB.api('/me', { fields: 'name, email' }, (response: any) => {\r\n      console.log(response)\r\n      if (!response.error) {\r\n        // todo: get from our own database the points for the given email.. or id maybe for security by obscurity\r\n        setUser(response)\r\n        setStatus('connected')\r\n      }\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkFacebookStatus()\r\n  // eslint-disable-next-line\r\n  }, [])\r\n\r\n  const UserState = () => {\r\n    if (status === 'loading') {\r\n      return <Loading />\r\n    } else if (!user) {\r\n      return <FacebookLoginButton onClick={facebookLogin} />\r\n    }\r\n    return <UserDropdown\r\n      user={user}\r\n      logout={facebookLogout}\r\n    />\r\n  }\r\n\r\n  return <UserState />\r\n}\r\n\r\nexport default UserHeaderStatus\r\n","import React from 'react'\r\n\r\nimport { Spinner } from 'components'\r\n\r\nimport './Loading.scss'\r\n\r\ntype LoadingProps = {\r\n  size?: number\r\n}\r\n\r\nconst Loading = ({ size = 2 }: LoadingProps) => {\r\n  return (\r\n    <div className='loading-component' style={{ marginTop: `${size / 2}em` }}>\r\n      <Spinner size={size} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading\r\n","import { Col } from 'reactstrap'\r\n\r\nexport default Col\r\n","import { Row } from 'reactstrap'\r\n\r\nexport default Row\r\n","import React from 'react'\r\nimport { FaSpinner } from 'react-icons/fa'\r\n\r\nimport './Spinner.scss'\r\n\r\ntype SpinnerProps = {\r\n  size?: number\r\n}\r\n\r\nconst Spinner = ({ size = 2 }: SpinnerProps) => {\r\n  return (\r\n    <div className='spinner-component'>\r\n      <FaSpinner className='icon-spin' size={`${size}em`} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Spinner\r\n","type EnvParams = {\r\n  api: string\r\n}\r\n\r\nconst production: EnvParams = {\r\n  api: 'https://api.jofnumokkur.xyz/v1'\r\n}\r\n\r\nconst local: EnvParams = {\r\n  api: 'http://127.0.0.1:8000/v1'\r\n}\r\n\r\nconst env = process.env.REACT_APP_ENV\r\n\r\nconst envParams: EnvParams = (\r\n  env === 'production'\r\n    ? production\r\n    : local\r\n)\r\n\r\nexport default envParams\r\n","import EmissionData from \"../types/EmissionData\"\r\n\r\nclass Co2EmissionService {\r\n  static co2TonnesPerTree: number = 0.1;\r\n  static treesPerTonCo2: number = 10;\r\n  static getCo2TonnesForTreeCount(treeCount: number) {\r\n    return this.co2TonnesPerTree * treeCount;\r\n  }\r\n\r\n  static getTreeCountForCo2Tonnes(tonnesCo2: number) {\r\n    return this.treesPerTonCo2 * tonnesCo2;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Returns an array of emissiondata in tonnes of co2\r\n   * Each entry in array has a label and value\r\n   **/\r\n  static getCo2EmissionData() : Array<EmissionData> {\r\n    //harðkóðað 4 now\r\n    return [\r\n      {\r\n        label: \"Flugsamgöngur\",\r\n        value: 1542.68\r\n      },\r\n      {\r\n        label: \"Landbúnaður og matvælaframleiðsla\",\r\n        value: 36.81\r\n      },\r\n      {\r\n        label: \"Heimili\",\r\n        value: 606.13\r\n      },\r\n      {\r\n        label: \"Flutningar á sjó og vatni\",\r\n        value: 493.68\r\n      },\r\n      {\r\n        label: \"Fiskveiðar og fiskeldi\",\r\n        value: 338.43\r\n      },\r\n      {\r\n        label: \"Veitustarfsemi og sorphirða\",\r\n        value: 15.92\r\n      },\r\n      {\r\n        label: \"Byggingastarfsemi og námugröftur\",\r\n        value: 203.02\r\n      },\r\n      {\r\n        label: \"Landflutningar og geymsla\",\r\n        value: 103.32\r\n      },\r\n      {\r\n        label: \"Verslun og þjónusta\",\r\n        value: 69.3\r\n      },\r\n      {\r\n        label: \"Framleiðsla á vörum og öðru\",\r\n        value: 30.1\r\n      },\r\n      {\r\n        label: \"Efnaframleiðsla\",\r\n        value: 153.04\r\n      },\r\n      {\r\n        label: \"Listir, íþróttir og afþreying\",\r\n        value: 4.4\r\n      },\r\n      {\r\n        label: \"Opinber þjónusta og heilbrigðismál\",\r\n        value: 12.6\r\n      }\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Co2EmissionService;\r\n","import axios from 'axios'\r\n\r\nimport EnvParams from 'environment'\r\n\r\nconst connector = axios.create({\r\n  baseURL: `${EnvParams.api}`,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-type': 'application/json'\r\n  }\r\n})\r\n\r\nexport default connector\r\n","import React, {useState} from \"react\";\r\nimport EmissionData from \"types/EmissionData\";\r\nimport {Co2EmissionService} from \"services\";\r\nimport {ProgressBar} from \"components\"\r\n\r\n\r\ntype ProgressBarProps = {\r\n    emissionData: Array<EmissionData>,\r\n    totalTreesPlanted: number,\r\n    [rest:string]: any\r\n  }\r\n  \r\n\r\nconst CurvedProgressBar = ({ emissionData, totalTreesPlanted, ...rest }: ProgressBarProps) => {\r\n    let co2Total  = emissionData.reduce( (a,b) => \r\n    { \r\n        return {value: (a.value + b.value), label:\"\" }\r\n    }).value;\r\n    \r\n    let co2Countered = Co2EmissionService.getCo2TonnesForTreeCount(totalTreesPlanted);\r\n    let progress = co2Countered/co2Total;\r\n    if(progress > 1 )progress = 1;\r\n   \r\n    var fillColor = getComputedStyle(document.documentElement)\r\n    .getPropertyValue('--progress-bar-fill');\r\n\r\n    var trailColor = getComputedStyle(document.documentElement)\r\n    .getPropertyValue('--progress-bar-trail');\r\n    console.log(trailColor, fillColor)\r\n    return (\r\n        <ProgressBar.SemiCircle\r\n            progress={progress}\r\n            \r\n            options={{ \r\n                strokeWidth: 4, \r\n                color: fillColor,\r\n                trailColor: trailColor,\r\n                duration: 1500,\r\n            }}\r\n            initialAnimate={true}\r\n            {...rest}\r\n        />\r\n     \r\n    );\r\n};\r\n\r\nexport default CurvedProgressBar;\r\n","import React, { Component } from 'react'\r\nimport isEqual from 'lodash/isEqual'\r\nimport ProgressBar from 'progressbar.js'\r\n\r\nclass Shape extends Component {\r\n  static defaultProps = {\r\n    ShapeClass: null,\r\n    options: {},\r\n    progress: 0,\r\n    text: null,\r\n    initialAnimate: false,\r\n    containerStyle: {},\r\n    containerClassName: 'progressbar-container'\r\n  };\r\n\r\n  shape;\r\n\r\n  progressBar = React.createRef();\r\n\r\n  create (props, oldProps) {\r\n    if (this.shape) {\r\n      return\r\n    }\r\n\r\n    // setState function is not used to prevent a new render cycle\r\n    // This handling happens outside of React component's lifecycle\r\n    const container = this.progressBar.current\r\n    this.shape = new props.ShapeClass(container, props.options)\r\n    if (props.initialAnimate) {\r\n      if (oldProps) {\r\n        this.setProgress(oldProps.progress)\r\n      }\r\n\r\n      this.animateProgress(props.progress)\r\n    } else {\r\n      this.setProgress(props.progress)\r\n    }\r\n\r\n    this.setText(props.text)\r\n  }\r\n\r\n  destroy () {\r\n    if (this.shape) {\r\n      this.shape.destroy()\r\n      this.shape = null\r\n    }\r\n  }\r\n\r\n  animateProgress (progress) {\r\n    this.shape.animate(progress)\r\n  }\r\n\r\n  setProgress (progress) {\r\n    this.shape.set(progress)\r\n  }\r\n\r\n  setText (text) {\r\n    if (text) {\r\n      this.shape.setText(text)\r\n    }\r\n  }\r\n\r\n  componentDidUpdate (prevProps) {\r\n    if (!isEqual(this.props.options, prevProps.options)) {\r\n      this.destroy()\r\n      this.create(this.props, prevProps)\r\n    }\r\n    this.animateProgress(this.props.progress)\r\n    this.setText(this.props.text)\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.create(this.props, null)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    this.destroy()\r\n  }\r\n\r\n  render () {\r\n    const { style, containerClassName } = this.props\r\n    return <div className={containerClassName} style={style} ref={this.progressBar} />\r\n  }\r\n}\r\n\r\nclass Line extends Component {\r\n  render () {\r\n    return <Shape {...this.props} ShapeClass={ProgressBar.Line} />\r\n  }\r\n}\r\n\r\nclass Circle extends Component {\r\n  render () {\r\n    return <Shape {...this.props} ShapeClass={ProgressBar.Circle} />\r\n  }\r\n}\r\n\r\nclass SemiCircle extends Component {\r\n  render () {\r\n    return <Shape {...this.props} ShapeClass={ProgressBar.SemiCircle} />\r\n  }\r\n}\r\n\r\nexport default {\r\n  Line,\r\n  Circle,\r\n  SemiCircle\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\ntype TreeCounterProps = {\r\n  totalTreesPlanted: number;\r\n  [rest: string]: any;\r\n};\r\n\r\nconst TreeCounter = ({ totalTreesPlanted, ...rest }: TreeCounterProps) => {\r\n  var readableString = totalTreesPlanted.toLocaleString(\"IS-is\");\r\n\r\n  return (\r\n    <div {...rest}>\r\n      <p>{readableString}</p>\r\n      <p> tré gróðursett</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeCounter;\r\n","import React from \"react\";\r\nimport { CurvedProgressBar, TreeCounter } from \"components\";\r\nimport { Co2EmissionService } from \"services\";\r\nimport \"./Home.scss\";\r\n\r\nconst Home = () => (\r\n  <div className=\"home-page\">\r\n    <section className = \"intro_section\">\r\n    <div className=\"counter_and_logo_outer_container\">\r\n      <div className =\"counter_and_logo_container\">\r\n      <TreeCounter className=\"treecounter\" totalTreesPlanted={5555} />\r\n      <img className=\"logo\" alt=\"Our logo\" src=\"/assets/logo-200x200.png\" />\r\n      </div>\r\n     \r\n      <CurvedProgressBar\r\n        emissionData={Co2EmissionService.getCo2EmissionData()}\r\n        totalTreesPlanted={5555}\r\n      />\r\n    </div>\r\n    </section>\r\n  </div>\r\n);\r\n\r\nexport default Home;\r\n//Photo by Jon Flobrant on Unsplash","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Redirect,\r\n  Route,\r\n  Switch\r\n} from 'react-router-dom'\r\n\r\nimport { Header, CurvedProgressBar } from 'components'\r\n\r\nimport { Home } from 'pages'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './styles/index.scss'\r\n\r\nconst App = () => (\r\n  <>\r\n    <Header />\r\n    <div>\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path='/' component={Home} />\r\n          <Redirect to='/' />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  </>\r\n)\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}